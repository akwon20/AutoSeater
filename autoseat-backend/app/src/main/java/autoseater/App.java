/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package autoseater;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import org.chocosolver.solver.variables.IntVar;

public class App {

    static Scanner scanner;

    public String getGreeting() {
        return "Hello World!";
    }

    public static int setCount() {
        int count;

        while (true) {
            try {
                count = Integer.parseInt(scanner.nextLine());
                break;
            } catch (NumberFormatException e) {
                System.out.println("Invalid input! Try again.");
            }
        }

        return count;
    }

    public static String inputName(List<Student> studentList) {
        String name = "";
        Boolean nameFound = false;

        while (true) {
            name = scanner.nextLine();

            for (Student student : studentList) {
                if (student.getName().equals(name)) {
                    nameFound = true;
                    break;
                }
            }

            if (!nameFound) {
                System.out.println("Student not found! Try again.");
            }
            else {
                break;
            }
        }

        return name;
    }

    public static Integer getStudentIdByName(List<Student> studentList, String name) {
        for (Student student : studentList) {
            if (student.getName().equals(name)) {
                return student.getIdNum();
            }
        }

        return null;
    }

    public static String getStudentNameById(List<Student> studentList, int id) {
        for (Student student : studentList) {
            if (student.getIdNum() == id) {
                return student.getName();
            }
        }

        return "";
    }

    public static List<Integer[]> setSeatingPairs(List<Student> studentList, int count) {
        List<Integer[]> rules = new ArrayList<Integer[]>();

        for (int i = 0; i < count; i++) {
            System.out.println("Constraint " + i);
            System.out.println("Enter Name 1: ");
            String name1 = inputName(studentList);

            System.out.println("Enter Name 2: ");
            String name2 = inputName(studentList);

            int id1 = getStudentIdByName(studentList, name1);
            int id2 = getStudentIdByName(studentList, name2);

            Integer[] pair = {id1, id2};

            rules.add(pair);
        }

        return rules;
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());

        int countStudent, countRows, countCols, countConst, countAdj;
        IntVar[][] seats;
        List<Student> students = new ArrayList<Student>();
        List<Integer[]> pairsForbidden_id = new ArrayList<Integer[]>();
        List<Integer[]> pairsAllowed_id = new ArrayList<Integer[]>();

        scanner = new Scanner(System.in);
        Assigner assigner = new Assigner();

        System.out.println("Enter the number of students: ");
        countStudent = setCount();

        if (countStudent < 1) {
            System.out.println("ERR: There must be at least 1 student!");
            return;
        }

        for (int i = 0; i < countStudent; i++) {
            System.out.println("Enter name for Student " + i + ": ");
            String name = scanner.nextLine();
            students.add(new Student(i, name));
        }

        System.out.println("Enter the number of rows: ");
        countRows = setCount();

        System.out.println("Enter the number of columns: ");
        countCols = setCount();

        System.out.println("Number of rows: " + countRows);
        System.out.println("Number of columns: " + countCols);

        if ((countRows < 1) || (countCols < 1)) {
            System.out.println("ERR: There must be at least 1 row or column!");
            return;
        }

        System.out.println("Enter the number of constraints: ");
        countConst = setCount();

        System.out.println("Enter the adjacent seatings: ");
        countAdj = setCount();

        System.out.println("Number of constraints: " + countConst);
        System.out.println("Number of adjacent seatings: " + countAdj);

        for (int j = 0; j < students.size(); j++) {
            System.out.println(students.get(j).getName());
        }

        pairsForbidden_id = setSeatingPairs(students, countConst);

        for (Integer[] forbidden_pair : pairsForbidden_id) {
            int forbidden_val1 = forbidden_pair[0];
            int forbidden_val2 = forbidden_pair[1];

            System.out.println("Constraint: {" + getStudentNameById(students, forbidden_val1) + ", " + getStudentNameById(students, forbidden_val2) + "}");
        }

        pairsAllowed_id = setSeatingPairs(students, countAdj);

        for (Integer[] allowed_pair : pairsAllowed_id) {
            int allowed_val1 = allowed_pair[0];
            int allowed_val2 = allowed_pair[1];

            System.out.println("Adjacency: {" + getStudentNameById(students, allowed_val1) + ", " + getStudentNameById(students, allowed_val2) + "}");
        }

        scanner.close();
        seats = assigner.assignSeats(countRows, countCols, pairsForbidden_id, pairsAllowed_id);

        for (int i = 0; i < countRows; i++) {
            for (int j = 0; j < countCols; j++) {
                System.out.print(getStudentNameById(students, seats[i][j].getValue()) + "\t");
            }
            System.out.println();
        }
    }
}
